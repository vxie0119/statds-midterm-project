---
title: "Midterm Project"
author: "Vincent Xie"
toc: true
number-sections: true
highlight-style: pygments
format: 
  pdf: 
    geometry: 
      - top=30mm
      - left=20mm
---

# **Midterm Project: Rodents in NYC** 

[Rodents in NYC](https://en.wikipedia.org/wiki/Rats_in_New_York_City)
are widespread, as they are in many densely populated areas. As of
October 2023, NYC dropped from the 2nd to the 3rd places in the annual
["rattiest city"
list](https://www.orkin.com/press-room/top-rodent-infested-cities-2023#)
released by a pest control company. Rat sightings in NYC was analyzed
by Dr. Michael Walsh in a [2014 PeerJ
article](https://peerj.com/articles/533/). We investigate this problem
from a different angle with the [NYC Rodent Inspection
data](https://data.cityofnewyork.us/Health/Rodent-Inspection/p937-wjvj/about_data),
provided by the Department of Health and Mental Hygiene (DOHMH).
Download the 2022-2023 data by filtering the `INSPECTION_DATE` to
between 11:59:59 pm of 12/31/2021 and 12:00:00 am of 01/01/2024
and `INSPECTION_TYPE` is either `Initial` or `Compliance` (which
should be about 108 MB). Read the meta data information
to understand the data.

## Data Initialization
```{python}
# Importing packages and dataset
import pandas as pd
#import pyarrow
import warnings

# Suppress all warnings
warnings.filterwarnings('ignore')

data = pd.read_csv("./data/Rodent_Inspection_Data.csv")
pluto = pd.read_csv("./data/PLUTO.csv")

# Listing the columns in vertical order
columns = data.columns.to_series().reset_index(drop=True)
columns
```

## Data cleaning

**There are two zipcode columns: `ZIP_CODE` and `Zipcodes`. Which one represent the zipcode of the inspection site? Comment on the data dictionary.**

The column `ZIP_CODE` represents the actual zipcode of the inspection site. When reviewing some of the `Zipcodes` values, I saw that some of them were from different states. We see that `Zipcodes` may be based off where the building owner is located. Given the representation of the value, it would be best to remove the `Zipcodes` column as it is not important in the overall investigation. 

Some key notes in the data dictionary:

- If a property/taxlot does not appear on file, it does not indicate the absense of rats.
- Neighborhoods with higher numbers of properties with active rat signs may not have higher rat populations. Just simply more inspections.
- `INSPECTION_TYPE` and `JOB_TICKET_OR_WORK_ORDER_ID` are unique identifiers for records in the dataset. 
- `JOB_ID` is not a unique value and two values may be equal depending on if it is an `Initial` inspection or `Compliance` inspection. 

```{python}
is_unique = data['JOB_ID'].is_unique
is_unique
```

- `JOB_PROGRESS` aligns with `INSPECTION_TYPE` where Initial = 1 and Compliance = 2.
- `BBL` is a number using `BORO_CODE`, `BLOCK`, and `LOT`. If any `BBL` values are missing, we can generate the values based on the three other values. This dataset can also be mapped using the Department of City Planning's PLUTO dataset which could be used to fill in missing data.
    - Common columns between Inspection data and PLUTO data: borough, block, lot, community board, census tract, council district, postcode/zipcode, police precinct, bbl, xcoord, ycoord, latitude, longitude.
- `X/Y_COORDINATE` use the NY State Plane Long Island Coordinate system.
- `Latitude/Longitude` is in decimal degrees of the World Geodetic System (WGS84).


**Summarize the missing information. Are their missing values that can be filled using other columns? Fill in those values.**
```{python}
# Checking for missing values in each column
missing_info = data.isnull().sum()

# Summarizing the missing information
missing_info_summary = missing_info[missing_info > 0].sort_values(ascending=False)
missing_info_summary
```

- BBL: The Borough, Block, Lot number (BBL) has the same number of missing values as the Building Identification Number (BIN). We see that there are no missing values for `BORO_CODE`, `BLOCK`, and `LOT` so we can use these values to fill in the BBL.

```{python}
# Filling in every row in the BBL column with the boro_code, block, and lot numbers
# The BBL is a concatenation of the borough code, block, and lot number

# Function to concatenate boro_code, block, and lot to create the BBL
def create_bbl(boro_code, block, lot):
    return f"{boro_code}{block:05d}{lot:04d}"

# Applying the function to each row where BBL is missing
data.loc[data['BBL'].isnull(), 'BBL'] = data.apply(lambda row: create_bbl(row['BORO_CODE'], row['BLOCK'], row['LOT']) if pd.isnull(row['BBL']) else row['BBL'], axis=1)

# Checking the first few rows to verify the changes
data[['BORO_CODE', 'BLOCK', 'LOT', 'BBL']].head()
```
- X_COORD and Y_COORD: (fix) There are many cases where the X and Y coordinates are missing. This can be filled in using the `Location` column. If the `Location` column is missing, we can take the `HOUSE_NUMBER`, `STREET_NAME`, `ZIP_CODE` to reverse geocode and find the X and Y coordinates.

- Zipcodes: This column has many missing values and incorrect values. The data dictionary does not define the intended use of this column so this is a column we can consider storing.

- Borough Boundaries: From the data, we see that the `Borough Boundaries` column has a number associated with a specific borough. We see that:

    - Staten Island = 1
    - Brooklyn = 2
    - Queens = 3 
    - Manhattan = 4
    - Bronx = 5

The values in this column can easily be filled in based on what the `Borough` value is.

- Police Precinct, Community Districts, City Council District: There are an equal number of values that are missing. These values would also be quite difficult to fill in and do not seem to have a purpose in the dataset. We can consider storing these values.

- BIN: Building Identification number

- Community Board, Council District, Census Tract: There are 10,304 missing values in each of these columns. It is difficult to use information from other columns to fill in the data. In terms of significance for the overall project, it would be best to consider storing these columns.

- NTA: The Neighborhood Tabulation Area cannot be filled using other columns. It would be difficult to fill in the values unless we access a different dataset.

- Location, Latitude, Longitude: With these missing values, they can be used to find each other. If both `Location` and both `Latitude` and `Longitude` values are missing, we can use the `Street Name` and `House Name` to potentially locate all of the missing information. `ZIP_CODE` is also another column that may help our investigation.

- ZIP_CODE: By using information from the `Location` and  `Street Name` column, we can locate the zipcode using a geospatial python package.

- HOUSE_NUMBER:

- STREET_NAME:

- RESULT:

- BOROUGH:

**Are their redundant information in the data? Try storing the data using `arrow` and comment on the efficiency gain.**

From the previous part, these are the following columns I would store:

1. Zip codes
2. Police Precincts
3. Community Districts
4. City Council Districts
5. BIN
6. Community Board
7. Council District
8. Census Tract
9. NTA

```
{python}
import pyarrow as pa
import pyarrow.parquet as pq

# Converting the pandas dataframe to a pyarrow table
arrow_table = pa.Table.from_pandas(data)
pa.default_serialization_context().serialize(pa.Table.from_pandas(data))

# Writing the data to a parquet file to check the efficiency in terms of storage
parquet_file_path = './Rodent_Inspection_Data.parquet'
pq.write_table(arrow_table, parquet_file_path)

# Checking the size of the original CSV file and the new Parquet file
import os
original_size = os.path.getsize(file_path)
parquet_size = os.path.getsize(parquet_file_path)

original_size, parquet_size
```

**Are there invalid zipcode or borough? Justify and clean them up if yes.**



## Data exploration

**Create binary variable `passing` indicating passing or not for the inspection result. Does `passing` depend on whether the inspection is initial or compliance? State your hypothesis and summarize your test result.**

**Are the passing pattern different across different boroughs for initial inspections? How about compliance inspections? State your hypothesis and summarize your test results.**

**If we suspect that the passing rate may depends on the time of a day of the inspection, we may compare the passing rates for inspections done in the mornings and inspections one in the afternoons. Visualize the comparison by borough and inspection type.**

**Perform a formal hypothesis test to confirm the observations from your visualization.**

## Data analytics

**Aggregate the inspections by zip code to create a dataset with five columns. The first three columns are `zipcode`; `n_initial`, the count of the initial inspections in that zipcode; and  `n_initpass`, the number of initial inspections with a passing result in that zipcode. The other two variables are `n_compliance` and `n_comppass`, the counterpart for compliance inspections.**

**Add a variable to your dataset, `n_sighting`, which represent the number of rodent sightings from the 311 service request data in the same 2022-2023 period.**

**Merge your dataset with the simple zipcode table in package `uszipcode` by zipcode to obtain demographic and socioeconomic variables at the zipcode level.**

**Build a binomial regression for the passing rate of initial inspections at the zipcode level. Assess the goodness-of-fit of your model. Summarize your results to a New Yorker who is not data science savvy.**

##  Research Question

   Now you know the data quite well. Come up with a research
   question of interest that can be answered by the data, which
   could be analytics or visualizations. Perform the needed
   analyses and answer your question.